(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.client = global.client || {}, global.client.js = factory()));
})(this, (function () { 'use strict';

	const FunctionComponent = 0; // 函数组件
	const HostRoot = 3; // HostRootFiber
	const HostComponent = 5; // 原生Element
	const HostText = 6; // 文本或数字

	const NoFlags = 0b0000000;
	const Placement = 0b0000010;
	const Update = 0b0000100;
	const ChildDeletion = 0b0001000;
	const MutationMask = Placement | Update | ChildDeletion;

	class FiberNode {
	    type;
	    tag;
	    pendingProps;
	    key;
	    stateNode;
	    ref;
	    return;
	    sibling;
	    child;
	    index;
	    updateQueue;
	    memorizedProps;
	    memorizedState;
	    alternate;
	    flags;
	    subTreeFlags;
	    constructor(tag, pendingProps, key) {
	        this.tag = tag; //
	        this.key = key;
	        this.stateNode = null; // 对于HostComponent <div>来说，此处保存真实dom对应的div实例
	        this.type = null; // tag类型所对应的具体内容，比如函数组件，此处就为该函数
	        // 构成树状结构
	        this.return = null; // 父fiberNode
	        this.sibling = null;
	        this.child = null;
	        this.index = 0; // 在父节点中的索引
	        this.ref = null;
	        // 作为工作单元
	        this.pendingProps = pendingProps; // 刚开始工作的时候的props
	        this.memorizedProps = null;
	        this.updateQueue = null;
	        this.memorizedState = null;
	        /**
	         * 当此FiberNode为已经渲染的FiberNode树（current）时，此值指向WorkInProgress(正在进行修改的树)
	         * 反之，当此树为WorkInProgress时，指向Current
	         */
	        this.alternate = null;
	        // 副作用
	        this.flags = NoFlags;
	        this.subTreeFlags = NoFlags;
	    }
	}
	class FiberRootNode {
	    container; //对应宿主环境实例，对于浏览器，为HTMLElement
	    current;
	    finishedWork; // 更新完成后的HostRootFiber
	    constructor(container, hostRootFiber) {
	        this.container = container;
	        // FiberRootNode <-->HostRootFiber双向链接
	        this.current = hostRootFiber;
	        hostRootFiber.stateNode = this;
	        this.finishedWork = null;
	    }
	}
	const createWorkInProgress = (current, pendingProps) => {
	    let wip = current.alternate;
	    if (wip === null) {
	        // mount
	        wip = new FiberNode(current.tag, pendingProps, current.key);
	        wip.stateNode = current.stateNode;
	        wip.alternate = current;
	        current.alternate = wip;
	    }
	    else {
	        // update
	        wip.pendingProps = pendingProps;
	        wip.flags = NoFlags;
	        wip.subTreeFlags = NoFlags;
	    }
	    wip.type = current.type;
	    wip.updateQueue = current.updateQueue;
	    wip.child = current.child;
	    wip.memorizedProps = current.memorizedProps;
	    wip.memorizedState = current.memorizedState;
	    return wip;
	};
	function createFiberFromElement(element) {
	    const { type, key, props } = element;
	    let fiberTag = FunctionComponent;
	    if (typeof type === 'string') {
	        // "div"
	        fiberTag = HostComponent;
	    }
	    else if (typeof type !== 'function' && true) {
	        console.warn('未定义的type类型', element);
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    return fiber;
	}

	const createUpdate = (action) => {
	    return {
	        action
	    };
	};
	const createUpdateQueue = () => {
	    return {
	        shared: {
	            pending: null
	        }
	    };
	};
	const enqueueUpdate = (updateQueue, update) => {
	    updateQueue.shared.pending = update;
	};
	const processUpdateQueue = (baseState, pendingUpdate) => {
	    const result = {
	        memorizedState: baseState
	    };
	    const action = pendingUpdate?.action;
	    if (!action)
	        return result;
	    // 消费update
	    if (pendingUpdate !== null) {
	        if (action instanceof Function) {
	            result.memorizedState = action(baseState);
	        }
	        else {
	            result.memorizedState = action;
	        }
	    }
	    return result;
	};

	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	function reconcileSingleElement(returnFiber, currentFiber, element) {
	    // 根据ReactElement创建Fiber并返回
	    const fiber = createFiberFromElement(element);
	    fiber.return = returnFiber;
	    return fiber;
	}
	function reconcileSingleTextNode(returnFiber, currentFiber, content) {
	    const fiber = new FiberNode(HostText, { content }, null);
	    fiber.return = returnFiber;
	    return fiber;
	}
	function ChildReconciler(shouldTrackEffects) {
	    function placeSingleChild(fiber) {
	        if (shouldTrackEffects && fiber.alternate === null) {
	            fiber.flags |= Placement;
	        }
	        return fiber;
	    }
	    return function reconcileChildFibers(returnFiber, currentFiber, newChild) {
	        // 判断当前fiber的类型
	        if (typeof newChild === 'object' && newChild != null) {
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    return placeSingleChild(
	                    // 根据ReactElement创建FiberNode,并与父FiberNode通过return链接，同时返回该FiberNode
	                    reconcileSingleElement(returnFiber, currentFiber, newChild));
	                default:
	                    {
	                        console.warn('未实现的reconcile类型', newChild);
	                    }
	                    break;
	            }
	        }
	        // TODO 多节点情况 <ul><li></li></ul>
	        // HostText
	        if (typeof newChild === 'string' || typeof newChild === 'number') {
	            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
	        }
	        {
	            console.warn('未实现的reconcile类型', newChild);
	        }
	        return null;
	    };
	}
	const reconcileChildFibers = ChildReconciler(true);
	const mountChildFibers = ChildReconciler(false);

	const beginWork = (wip) => {
	    // 比较并返回子FiberNode
	    switch (wip.tag) {
	        case HostRoot:
	            // 对HostRootFiber执行更新
	            return updateHostRoot(wip);
	        case HostComponent:
	            return updateHostComponent(wip);
	        case HostText:
	            return null;
	        default:
	            {
	                console.warn('beginWork未实现的类型');
	            }
	            return null;
	    }
	};
	function updateHostRoot(wip) {
	    const baseState = wip.memorizedState;
	    const updateQueue = wip.updateQueue;
	    const pending = updateQueue.shared.pending; // <App/>
	    updateQueue.shared.pending = null;
	    const { memorizedState } = processUpdateQueue(baseState, pending);
	    wip.memorizedState = memorizedState;
	    const nextChildren = wip.memorizedState; // 就是render方法传进去的ReactElement,例如<App/>
	    reconcileChildren(wip, nextChildren); // HostRootFiber, <App/>
	    return wip.child;
	}
	function updateHostComponent(wip) {
	    const nextProps = wip.pendingProps;
	    const nextChildren = nextProps.children;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function reconcileChildren(wip, children) {
	    const current = wip.alternate;
	    if (current !== null) {
	        // update
	        // 相对于mount来说，不同点就是wip对应的FiberNode存在，此时如果wip.child.alternate没有孩子，则需要标记Placement Tags
	        // 在首次mount时，
	        wip.child = reconcileChildFibers(wip, current?.child, children);
	    }
	    else {
	        // mount阶段
	        // 内部建立了childFiber.return = wip,此处建立父指向子的child字段
	        wip.child = mountChildFibers(wip, null, children);
	    }
	}

	const createInstance = (type, props) => {
	    const element = document.createElement(type);
	    // TODO 处理Props
	    return element;
	};
	const appendInitialChild = (parent, child) => {
	    parent.appendChild(child);
	};
	const createTextInstance = (content) => {
	    return document.createTextNode(content);
	};
	const appendChildToContainer = appendInitialChild;

	const completeWork = (wip) => {
	    // 递归中的归
	    const newProps = wip.pendingProps;
	    const current = wip.alternate;
	    switch (wip.tag) {
	        case HostComponent:
	            // 当前的FiberNode存在且dom树上有挂载的情况，即update
	            if (current !== null && wip.stateNode) ;
	            else {
	                // 构建DOM
	                const instance = createInstance(wip.type);
	                appendAllChildren(instance, wip);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostText:
	            if (current !== null && wip.stateNode) ;
	            else {
	                // 构建DOM
	                const instance = createTextInstance(newProps.content);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostRoot:
	            /**
	             * 跳过
	             */
	            bubbleProperties(wip);
	            return null;
	        default:
	            {
	                console.warn('未处理的completeWork情况', wip);
	            }
	            return null;
	    }
	};
	function appendAllChildren(parent, wip) {
	    let node = wip.child;
	    while (node != null) {
	        if (node.tag === HostComponent || node.tag === HostText) {
	            appendInitialChild(parent, node?.stateNode);
	        }
	        else if (node.child !== null) {
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node === wip) {
	            return;
	        }
	        while (node.sibling === null) {
	            if (node.return === null || node.return === wip) {
	                return;
	            }
	            node = node?.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	function bubbleProperties(wip) {
	    let subTreeFlags = NoFlags;
	    let child = wip.child;
	    while (child !== null) {
	        subTreeFlags |= child.subTreeFlags;
	        subTreeFlags |= child.flags;
	        child.return = wip;
	        child = child.sibling;
	    }
	    wip.subTreeFlags |= subTreeFlags;
	}

	let nextEffect = null;
	const commitMutationEffects = (finishedWork) => {
	    nextEffect = finishedWork;
	    while (nextEffect !== null) {
	        const child = nextEffect.child;
	        // 有子副作用，继续向下递归
	        if ((nextEffect.subTreeFlags & MutationMask) != NoFlags && child !== null) {
	            nextEffect = child;
	        }
	        else {
	            {
	                console.log(nextEffect);
	            }
	            while (nextEffect !== null) {
	                commitMutationEffectsOnFiber(nextEffect);
	                const sibling = nextEffect.sibling;
	                if (sibling !== null) {
	                    nextEffect = sibling;
	                    break;
	                }
	                nextEffect = nextEffect.return;
	            }
	            {
	                console.log(nextEffect);
	            }
	        }
	    }
	};
	const commitMutationEffectsOnFiber = (finishedWork) => {
	    const flags = finishedWork.flags;
	    if ((flags & Placement) !== NoFlags) {
	        commitPlacement(finishedWork);
	        finishedWork.flags &= ~Placement;
	    }
	    // flags Update
	    // flags ChildDeletion
	};
	const commitPlacement = (finishedWork) => {
	    {
	        console.warn('执行placement操作');
	    }
	    const hostParent = getHostParent(finishedWork);
	    if (hostParent !== null) {
	        appendPlacementNodeIntoContainer(finishedWork, hostParent);
	    }
	};
	function getHostParent(fiber) {
	    let parent = fiber.return;
	    while (parent) {
	        const parentTag = parent.tag;
	        if (parentTag === HostComponent) {
	            return parent.stateNode;
	        }
	        if (parentTag === HostRoot) {
	            return parent.stateNode.container;
	        }
	        parent = parent.return;
	    }
	    {
	        console.warn('未找到hostParent');
	    }
	    return null;
	}
	function appendPlacementNodeIntoContainer(finishedWork, hostParent) {
	    if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
	        appendChildToContainer(hostParent, finishedWork.stateNode);
	        return;
	    }
	    const child = finishedWork.child;
	    if (child != null) {
	        appendPlacementNodeIntoContainer(child, hostParent);
	        let sibling = child.sibling;
	        while (sibling !== null) {
	            appendPlacementNodeIntoContainer(sibling, hostParent);
	            sibling = sibling.sibling;
	        }
	    }
	}

	let workInProgress = null;
	function prepareFreshStack(root) {
	    workInProgress = createWorkInProgress(root.current, {});
	}
	function scheduleUpdateOnFiber(fiber) {
	    // 调度功能
	    const root = markUpdateFromFiberToRoot(fiber);
	    renderRoot(root);
	}
	function markUpdateFromFiberToRoot(fiber) {
	    let node = fiber;
	    let parent = node.return;
	    /**
	     * 循环找parent，直到没有parent
	     * 注意hostRootFiber的没有parent字段，因此该循环就会停止
	     */
	    while (parent !== null) {
	        node = parent;
	        parent = node.return;
	    }
	    // 发现时hostRootFiber，返回其父节点fiberRootNode
	    if (node.tag === HostRoot) {
	        return node.stateNode;
	    }
	    return null;
	}
	function renderRoot(root) {
	    // 初始化，根据current新建HostFiberRoot,并且将新建的HostFiberRoot赋值给workInProgress，并在接下来，进行工作循环
	    prepareFreshStack(root);
	    do {
	        try {
	            workLoop();
	            break;
	        }
	        catch (e) {
	            {
	                console.warn(`workLoop Error: ${e}`);
	            }
	            workInProgress = null;
	        }
	    } while (true);
	    const finishedWork = root.current.alternate;
	    root.finishedWork = finishedWork;
	    // 执行具体的commit
	    commitRoot(root);
	}
	function commitRoot(root) {
	    const finishedWork = root.finishedWork;
	    if (finishedWork === null) {
	        return;
	    }
	    {
	        console.warn('commit阶段开始', finishedWork);
	    }
	    // 重置
	    root.finishedWork = null;
	    // 判断是否存在3个子阶段
	    const subtreeHasEffect = (finishedWork.subTreeFlags & MutationMask) !== NoFlags;
	    const rootHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;
	    if (subtreeHasEffect || rootHasEffect) {
	        // beforeMutation
	        // mutation
	        commitMutationEffects(finishedWork);
	        root.current = finishedWork;
	        // layout
	    }
	    else {
	        root.current = finishedWork;
	    }
	}
	function workLoop() {
	    while (workInProgress !== null) {
	        // 分为递和归两个阶段，直到完成一次整个Fiber树的递归操作
	        performUnitOfWork(workInProgress);
	    }
	}
	/**
	 * @param fiber HostFiberRoot
	 */
	function performUnitOfWork(fiber) {
	    const next = beginWork(fiber); // 如果有子节点，继续遍历子节点
	    fiber.memorizedProps = fiber.pendingProps;
	    if (next === null) {
	        completeUnitOfWork(fiber);
	    }
	    else {
	        workInProgress = next;
	    }
	}
	/**
	 * 往上逐层"归"，如果有兄弟节点，需要往下”递归“
	 * @param fiber
	 */
	function completeUnitOfWork(fiber) {
	    let node = fiber;
	    do {
	        completeWork(node);
	        // 查看有没有兄弟，有的话，从兄弟节点开始进行递和归
	        const sibling = node.sibling;
	        if (sibling !== null) {
	            workInProgress = sibling;
	            return;
	        }
	        node = node.return;
	        workInProgress = node;
	    } while (node !== null);
	}

	/**
	 * 创建容器(FiberRootNode)以及根FiberRoot(HostFiberRoot),并建立双向链接
	 * @param container 宿主环境的容器实例，浏览器中为某一div
	 * @return root FiberRootNode
	 */
	function createContainer(container) {
	    const hostRootFiber = new FiberNode(HostRoot, {}, null);
	    /**
	     * 内部建立了FiberRootNode <-->HostRootFiber双向链接，注意HostRootFiber挂载到了FiberRootNode的current属性上
	     * 之后在创建工作的HostRootFiber的时候(FiberRootNode.alternate)的时候，从current复制状态
	     * 在最后切换的时候，由于current有HostRootNode,在替换的时候就有一次Placement操作
	     * 目的是保证HostRootNode之下的树离屏渲染好后，最后只执行一次Placement操作
	     */
	    const root = new FiberRootNode(container, hostRootFiber);
	    hostRootFiber.updateQueue = createUpdateQueue();
	    return root;
	}
	/**
	 * 首次使用jsx生成的ReactElement树(<App/>)创建Fiber树以及挂载节点
	 * @param element 由babel编译成jsx函数调用并生成的ReactElement树
	 * @param root FiberRootNode
	 */
	function updateContainer(element, root) {
	    const hostRootFiber = root.current;
	    const update = createUpdate(element);
	    enqueueUpdate(hostRootFiber.updateQueue, update); // hostRootFiber.updateQueue.shared.pending此时就是 jsx生成的ReactElement树(<App/>)
	    scheduleUpdateOnFiber(hostRootFiber);
	    return element;
	}

	function createRoot(container) {
	    const root = createContainer(container);
	    return {
	        render(element) {
	            updateContainer(element, root);
	        }
	    };
	}

	var ReactDOM = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot
	});

	return ReactDOM;

}));
